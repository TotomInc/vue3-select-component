---
alwaysApply: true
---

# Scannable Code Guidelines/Separating Concerns.

## Core Principle

Code should be scannable through proper abstraction, not comments. Use variables and helper functions to make intent clear at a glance.

## Good Scannable Code

- Extract complex logic into well-named variables
- Create helper functions for multi-step operations
- Use descriptive names that explain intent

Examples:

```javascript
// ✅ Scannable: Intent is clear from variable names
const isValidUser = user.isActive && user.hasPermissions;
const shouldProcessPayment = amount > 0 && !order.isPaid;

// ✅ Scannable: Complex logic extracted to helper
const searchParams = buildFreesoundSearchParams({ query, filters, pagination });
const transformedResults = transformFreesoundResults({ rawResults });
```

## Bad Unscannable Code

Avoid:

```javascript
// ❌ Hard to scan: What does this condition mean?
if (type === "effects" || !type) {
  params.append("filter", "duration:[* TO 30.0]");
  params.append("filter", `avg_rating:[${min_rating} TO *]`);
  if (commercial_only) {
    params.append("filter", 'license:("Attribution" OR "Creative Commons 0")');
  }
}

// ❌ Hard to scan: Complex ternary
const sortParam = query
  ? sort === "score"
    ? "score"
    : `${sort}_desc`
  : `${sort}_desc`;
```

## Rule

Make code scannable by extracting intent into variables and helper functions. If you need to think about what code does, extract it. The reader should understand the flow without diving into implementation details.
